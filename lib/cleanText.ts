// lib/cleanText.ts
/**
 * Удаляем Markdown/разметку из ответа модели и приводим к чистому тексту.
 * Никаких **звёздочек**, _подчёркиваний_, `код-блоков` и т.п.
 */
export function cleanAssistantText(input: string): string {
  let s = String(input ?? '');

  // 1) Тройные код-блоки ```lang ... ```
  s = s.replace(/```[\s\S]*?```/g, (block) => {
    // оставляем содержимое без ограждений
    return block
      .replace(/^```[^\n]*\n?/, '')
      .replace(/```$/, '');
  });

  // 2) Инлайн-код `code`
  s = s.replace(/`([^`]+)`/g, '$1');

  // 3) Жирный/курсив: **...**, __...__, *...*, _..._
  s = s.replace(/(\*\*|__)(.*?)\1/g, '$2');                   // **bold** / __bold__
  s = s.replace(/(^|[^\*])\*([^\*\n]+)\*(?=[^\*]|$)/g, '$1$2'); // *italic*
  s = s.replace(/(^|[^_])_([^_\n]+)_(?=[^_]|$)/g, '$1$2');      // _italic_

  // 4) Заголовки вида "# ", "## " и т.п.
  s = s.replace(/^\s{0,3}#{1,6}\s*/gm, '');

  // 5) Маркеры списков в начале строк: -, *, • → заменяем на "— "
  s = s.replace(/^\s*[-*•]\s+/gm, '— ');

  // 6) Чистим одиночные/случайные звёздочки
  s = s.replace(/\*{1,3}/g, '');

  // 7) Ровняем пробелы/пустые строки
  s = s.replace(/[ \t]+\n/g, '\n');
  s = s.replace(/\n{3,}/g, '\n\n');
  s = s.replace(/[ \t]{2,}/g, ' ');

  return s.trim();
}

export default cleanAssistantText;
