// prisma/schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============ Users ============
model User {
  id                String     @id @default(cuid())
  telegramId        String     @unique
  username          String?
  firstName         String?
  lastName          String?
  subscriptionUntil DateTime?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @default(now())

  favorites         Favorite[]
  // личные дела (новое)
  cases             Case[]
}

// ============ Favorites ============
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  title     String
  url       String?
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// ============ Library docs (new) ============
model Doc {
  id        String        @id @default(cuid())
  slug      String        @unique
  title     String
  category  String        // "constitution" | "codes" | "ustavy" | "pdd" | "federal"
  sourceUrl String?
  updatedAt DateTime      @default(now())
  createdAt DateTime      @default(now())

  versions  DocVersion[]
}

model DocVersion {
  id          String   @id @default(cuid())
  docId       String
  contentHtml String
  createdAt   DateTime @default(now())

  doc         Doc      @relation(fields: [docId], references: [id], onDelete: Cascade)

  @@index([docId])
}

// ============ Cases (новое) ============
model Case {
  id        String    @id @default(cuid())
  userId    String
  title     String
  status    String    @default("active") // active | closed | archived
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  nextDueAt DateTime? @map("next_due_at")

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CaseItem[]

  @@index([userId])
  @@index([status])
  @@index([nextDueAt])

  @@map("cases") // имя таблицы в БД
}

// Элементы таймлайна дела
model CaseItem {
  id        String   @id @default(cuid())
  caseId    String
  kind      String   // note | step | deadline | doc
  title     String
  body      String?
  dueAt     DateTime?
  done      Boolean  @default(false)
  priority  Int?
  createdAt DateTime @default(now())

  case      Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@index([caseId])
  @@index([kind])
  @@index([dueAt])

  @@map("case_items")
}
