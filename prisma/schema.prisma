// prisma/schema.prisma

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============ Users ============
model User {
  id                String     @id @default(cuid())
  telegramId        String     @unique
  username          String?
  firstName         String?
  lastName          String?

  // --- VK (добавлено для ВК; всё опционально) ---
  vkUserId          String?    @unique   // numeric/str id пользователя ВК
  vkScreenName      String?              // domain/shortname пользователя
  vkPhoto           String?              // аватар, если пригодится

  // подписка / тариф
  plan              String?    // 'PRO' | 'PROPLUS' (валидируем в коде)
  subscriptionUntil DateTime?

  // аудит
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  lastSeenAt        DateTime?

  favorites         Favorite[]
  cases             Case[]
  payments          Payment[]
  usageDaily        UsageDaily[]

  chatThreads       ChatThread[]
}

// ============ Суточный учёт запросов ============
model UsageDaily {
  id        String   @id @default(cuid())
  userId    String
  date      String   // YYYY-MM-DD (UTC)
  used      Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([date])
}

// ============ Favorites (старые закладки, оставляем для совместимости) ============
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  title     String
  url       String?
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// ============ Chat Threads (избранные чаты Pro+) ============
model ChatThread {
  id          String        @id @default(cuid())
  userId      String
  toolSlug    String        // например: 'urchatgpt', 'marketing', 'free-chat' и т.п.
  title       String
  emoji       String?
  starred     Boolean       @default(false) // можно держать false до нажатия на ★
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  lastUsedAt  DateTime      @default(now())

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    ChatMessage[]

  @@index([userId, starred])
  @@index([lastUsedAt])
  @@index([updatedAt])
}

// Сообщение в треде
model ChatMessage {
  id         String   @id @default(cuid())
  threadId   String
  role       String   // 'system' | 'user' | 'assistant'
  content    String   // текст
  imagesJson String?  // JSON-массив ссылок (для Pro+ генераций)
  createdAt  DateTime @default(now())

  thread     ChatThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId, createdAt])
}

// ============ Library docs ============
model Doc {
  id        String        @id @default(cuid())
  slug      String        @unique
  title     String
  category  String
  sourceUrl String?
  updatedAt DateTime      @default(now())
  createdAt DateTime      @default(now())

  versions  DocVersion[]
}

model DocVersion {
  id          String   @id @default(cuid())
  docId       String
  contentHtml String
  createdAt   DateTime @default(now())

  doc         Doc      @relation(fields: [docId], references: [id], onDelete: Cascade)

  @@index([docId])
}

// ============ Cases ============
model Case {
  id        String    @id @default(cuid())
  userId    String
  title     String
  status    String    @default("active") // active | closed | archived
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  nextDueAt DateTime? @map("next_due_at")

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CaseItem[]

  @@index([userId])
  @@index([status])
  @@index([nextDueAt])

  @@map("cases")
}

// Элементы таймлайна дела
model CaseItem {
  id        String   @id @default(cuid())
  caseId    String
  kind      String   // note | step | deadline | doc
  title     String
  body      String?
  dueAt     DateTime?
  done      Boolean  @default(false)
  priority  Int?
  createdAt DateTime @default(now())

  case      Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@index([caseId])
  @@index([kind])
  @@index([dueAt])

  @@map("case_items")
}

// ============ Payments (лог + идемпотентность) ============
model Payment {
  id                      String   @id @default(cuid())
  userId                  String
  telegramId              String
  payload                 String?

  // Тариф/план
  tier                    String?  // 'PRO' | 'PROPLUS'
  plan                    String?  // 'WEEK' | 'MONTH' | 'HALF_YEAR' | 'YEAR'

  // Сумма в МИНОРНЫХ единицах (Stars, копейки и т.п.)
  amount                  Int?
  currency                String?  // 'XTR' | 'RUB' | 'TON' и т.д.
  days                    Int?

  // Провайдеры/платформы
  platform                String?  // 'TG' | 'VK' | 'WEB' (добавлено для ВК)
  provider                String?  // 'TG_STARS' | 'VK_PAY' | 'TON_DIRECT' ...

  // Telegram
  telegramChargeId        String?  // telegram_payment_charge_id

  // VK (добавлено для ВК)
  vkOrderId               String?  // идентификатор заказа ВК (для идемпотентности)
  vkAppId                 Int?     // id приложения ВК, если нужно
  vkPayerId               String?  // vk user id плательщика

  // Прочее
  providerPaymentChargeId String?  // provider_payment_charge_id
  raw                     Json?    // сырой ответ провайдера/подпись и т.п. (для отладки)

  createdAt               DateTime @default(now())

  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([telegramId, telegramChargeId])
  @@unique([vkOrderId])            // у VK много NULL допустимо, но один и тот же заказ не продублируем
  @@index([userId])
  @@index([telegramId])
  @@index([platform])
  @@index([currency])
}
