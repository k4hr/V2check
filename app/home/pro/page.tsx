'use client';

import { useEffect, useMemo, useState } from 'react';
import Link from 'next/link';
import type { Route } from 'next';
import BackBtn from '@/app/components/BackBtn';

type Row = {
  emoji: string;
  title: string;
  href?: Route;
  soon?: boolean;
};

export default function ProHub() {
  const [q, setQ] = useState('');

  useEffect(() => {
    const w: any = window;
    try { w?.Telegram?.WebApp?.ready?.(); w?.Telegram?.WebApp?.expand?.(); } catch {}
  }, []);

  // –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ –±–µ–∑ TWA ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º ?id=
  const id = useMemo(() => {
    try { const u = new URL(window.location.href); return u.searchParams.get('id') || ''; }
    catch { return ''; }
  }, []);

  const to = (pathname: Route) =>
    (id ? { pathname, query: { id } } : pathname);

  const rows: Row[] = [
    { emoji: 'üìù', title: '–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç', soon: true },
    { emoji: 'üìÖ', title: '–ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å',     soon: true },
    { emoji: 'üåç', title: '–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫',       soon: true },
  ];

  const filtered = rows.filter(r =>
    r.title.toLowerCase().includes(q.trim().toLowerCase())
  );

  return (
    <main style={{ padding: 20, maxWidth: 720, margin: '0 auto' }}>
      <BackBtn fallback="/home" />

      <h1 style={{ textAlign: 'center' }}>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ ‚Äî Pro</h1>
      <p style={{ textAlign: 'center', opacity: .7, marginTop: 6 }}>
        –•–∞–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤. –ù–∞–ø–æ–ª–Ω–∏–º –±–ª–æ–∫–∞–º–∏ –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.
      </p>

      {/* –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ */}
      <div style={{ marginTop: 12 }}>
        <input
          type="search"
          inputMode="search"
          placeholder="–ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤‚Ä¶"
          value={q}
          onChange={(e) => setQ(e.currentTarget.value)}
          style={{
            width: '100%',
            padding: '12px 14px',
            borderRadius: 12,
            background: '#141823',
            border: '1px solid var(--border)',
            color: 'var(--fg, #fff)',
            outline: 'none'
          }}
        />
      </div>

      <div style={{ display: 'grid', gap: 12, marginTop: 14 }}>
        {filtered.length === 0 && (
          <div className="list-btn" style={{ opacity: .7, justifyContent: 'center' }}>
            –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
          </div>
        )}

        {filtered.map((r, i) => (
          r.href ? (
            <Link key={i} href={to(r.href)} className="list-btn" style={{ textDecoration: 'none', justifyContent: 'space-between' }}>
              <span className="list-btn__left"><span className="list-btn__emoji">{r.emoji}</span><b>{r.title}</b></span>
              <span className="list-btn__right"><span className="list-btn__chev">‚Ä∫</span></span>
            </Link>
          ) : (
            <div key={i} className="list-btn" style={{ opacity: .6, justifyContent: 'space-between' }}>
              <span className="list-btn__left"><span className="list-btn__emoji">{r.emoji}</span><b>{r.title}</b></span>
              <span className="list-btn__right">{r.soon ? '–°–∫–æ—Ä–æ' : ''}</span>
            </div>
          )
        ))}
      </div>
    </main>
  );
}
