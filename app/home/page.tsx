'use client';

import Link from 'next/link';
import type { Route } from 'next';
import { useEffect, useMemo, useState } from 'react';

/** –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ª–æ–∫–∞–ª–∏ */
type Locale =
  | 'ru' | 'en' | 'uk' | 'kk' | 'tr' | 'az' | 'ka' | 'hy'
  | 'be' | 'uz' | 'ky' | 'ro'
  | 'ar' | 'he'
  | 'hi' | 'id' | 'ms' | 'fil' | 'vi' | 'th'
  | 'pl' | 'cs' | 'sk' | 'hu' | 'bg' | 'sr';

/** –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ —Å –Ω–∞—Ç–∏–≤–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ —Ñ–ª–∞–≥–æ–º */
const LOCALES: { code: Locale; label: string; flag: string }[] = [
  // –°–ù–ì –∏ —Ä—è–¥–æ–º
  { code: 'ru', label: '–†—É—Å—Å–∫–∏–π',        flag: 'üá∑üá∫' },
  { code: 'be', label: '–ë–µ–ª–∞—Ä—É—Å–∫–∞—è',     flag: 'üáßüáæ' },
  { code: 'uk', label: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',     flag: 'üá∫üá¶' },
  { code: 'kk', label: '“ö–∞–∑–∞“õ—à–∞',        flag: 'üá∞üáø' },
  { code: 'uz', label: "O'zbekcha",      flag: 'üá∫üáø' },
  { code: 'ky', label: '–ö—ã—Ä–≥—ã–∑—á–∞',       flag: 'üá∞üá¨' },
  { code: 'hy', label: '’Ä’°’µ’•÷Ä’•’∂',        flag: 'üá¶üá≤' },
  { code: 'az', label: 'Az…ôrbaycanca',   flag: 'üá¶üáø' },
  { code: 'ka', label: '·É•·Éê·É†·Éó·É£·Éö·Éò',        flag: 'üá¨üá™' },
  { code: 'ro', label: 'Rom√¢nƒÉ',         flag: 'üá≤üá©' },
  { code: 'tr', label: 'T√ºrk√ße',         flag: 'üáπüá∑' },

  // MENA
  { code: 'ar', label: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©',         flag: 'üá∏üá¶' },
  { code: 'he', label: '◊¢◊ë◊®◊ô◊™',           flag: 'üáÆüá±' },

  // –Æ–∂–Ω–∞—è –∏ –Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è
  { code: 'hi', label: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä',          flag: 'üáÆüá≥' },
  { code: 'id', label: 'Bahasa Indonesia',flag: 'üáÆüá©' },
  { code: 'ms', label: 'Bahasa Melayu',   flag: 'üá≤üáæ' },
  { code: 'fil',label: 'Filipino',        flag: 'üáµüá≠' },
  { code: 'vi', label: 'Ti·∫øng Vi·ªát',      flag: 'üáªüá≥' },
  { code: 'th', label: '‡πÑ‡∏ó‡∏¢',             flag: 'üáπüá≠' },

  // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∏ –í–æ—Å—Ç–æ—á–Ω–∞—è –ï–≤—Ä–æ–ø–∞
  { code: 'pl', label: 'Polski',          flag: 'üáµüá±' },
  { code: 'cs', label: 'ƒåe≈°tina',         flag: 'üá®üáø' },
  { code: 'sk', label: 'Slovenƒçina',      flag: 'üá∏üá∞' },
  { code: 'hu', label: 'Magyar',          flag: 'üá≠üá∫' },
  { code: 'bg', label: '–ë—ä–ª–≥–∞—Ä—Å–∫–∏',       flag: 'üáßüá¨' },
  { code: 'sr', label: '–°—Ä–ø—Å–∫–∏',          flag: 'üá∑üá∏' },

  // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–ø–æ –º–∏—Ä—É)
  { code: 'en', label: 'English',         flag: 'üá¨üáß' },
];

/* ------------------- —É—Ç–∏–ª–∏—Ç—ã ------------------- */
function getCookie(name: string): string {
  try {
    const p = (document.cookie || '').split('; ').find(r => r.startsWith(name + '='));
    return p ? decodeURIComponent(p.split('=').slice(1).join('=')) : '';
  } catch { return ''; }
}
function setCookie(k: string, v: string) {
  try {
    const maxAge = 60 * 60 * 24 * 365; // 1 –≥–æ–¥
    document.cookie = `${k}=${encodeURIComponent(v)}; Max-Age=${maxAge}; Path=/; SameSite=Lax`;
  } catch {}
}
function haptic(type: 'light' | 'medium' = 'light') {
  try { (window as any)?.Telegram?.WebApp?.HapticFeedback?.impactOccurred?.(type); } catch {}
}
function readLocale(): Locale {
  const v = (getCookie('NEXT_LOCALE') || getCookie('locale') || 'ru').toLowerCase();
  return (LOCALES.some(l => l.code === v) ? (v as Locale) : 'ru');
}
function setLocaleEverywhere(code: Locale) {
  setCookie('locale', code);
  setCookie('NEXT_LOCALE', code);        // –¥–ª—è –±—É–¥—É—â–µ–≥–æ i18n/next-intl
  try { document.documentElement.lang = code; } catch {}
}

/* ------------------- –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ------------------- */
export default function Home() {
  const [open, setOpen] = useState(false);

  const currentLocale = useMemo<Locale>(() => readLocale(), []);
  const [pendingLocale, setPendingLocale] = useState<Locale>(currentLocale);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    const w: any = window;
    try { w?.Telegram?.WebApp?.ready?.(); w?.Telegram?.WebApp?.expand?.(); } catch {}
    // —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø—Ä–æ—Å—Ç–∞–≤–∏–º <html lang="">
    try { document.documentElement.lang = currentLocale; } catch {}
    // –Ω–µ–±–æ–ª—å—à–∞—è –∞–≤—Ç–æ-–ø—Ä–æ–∫—Ä—É—Ç–∫–∞, –µ—Å–ª–∏ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω –æ—Ç–∫—Ä—ã—Ç
    if (open) window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });
  }, [currentLocale, open]);

  // ?id= –¥–ª—è –¥–µ–±–∞–≥–∞, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ –±–µ–∑ TWA
  const linkSuffix = useMemo(() => {
    try {
      const u = new URL(window.location.href);
      const id = u.searchParams.get('id');
      return id ? `?id=${encodeURIComponent(id)}` : '';
    } catch { return ''; }
  }, []);

  async function onSave() {
    if (saving) return;
    setSaving(true);
    setLocaleEverywhere(pendingLocale);
    haptic('medium');

    // –ñ—ë—Å—Ç–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å cache-busting (–¥–ª—è iOS WebView)
    const url = new URL(window.location.href);
    url.searchParams.set('_lng', String(Date.now()));
    window.location.replace(url.toString());
  }

  function onCancel() {
    setPendingLocale(currentLocale);
    setOpen(false);
    haptic('light');
  }

  return (
    <main>
      {/* –®–∞–ø–∫–∞ */}
      <h1 style={{ textAlign: 'center' }}>LiveManager</h1>
      <p className="lm-subtitle" style={{ textAlign: 'center' }}>
        –£–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
      </p>

      {/* –ö–∞—Ä—Ç–æ—á–∫–∏ */}
      <div className="lm-grid" style={{ marginTop: 16 }}>
        <Link href={`/cabinet${linkSuffix}` as Route} className="card" style={{ textDecoration: 'none' }}>
          <span className="card__left">
            <span className="card__icon">üë§</span>
            <span className="card__title">–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</span>
          </span>
          <span className="card__chev">‚Ä∫</span>
        </Link>

        <Link href={`/pro${linkSuffix}` as Route} className="card card--pro" style={{ textDecoration: 'none' }}>
          <span className="card__left">
            <span className="card__icon">‚≠ê</span>
            <span className="card__title">–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É <span className="badge">Pro / Pro+</span></span>
          </span>
          <span className="card__chev">‚Ä∫</span>
        </Link>

        <Link href={`/pro/tools${linkSuffix}` as Route} className="card card--pro" style={{ textDecoration: 'none' }}>
          <span className="card__left">
            <span className="card__icon">üß∞</span>
            <span className="card__title">–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ <span className="badge">Pro</span></span>
          </span>
          <span className="card__chev">‚Ä∫</span>
        </Link>

        <Link href={`/pro-plus/tools${linkSuffix}` as Route} className="card card--proplus" style={{ textDecoration: 'none' }}>
          <span className="card__left">
            <span className="card__icon">üöÄ</span>
            <span className="card__title">–≠–∫—Å–ø–µ—Ä—Ç —Ü–µ–Ω—Ç—Ä <span className="badge badge--gold">Pro+</span></span>
          </span>
          <span className="card__chev">‚Ä∫</span>
        </Link>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞-–∞–∫–∫–æ—Ä–¥–µ–æ–Ω */}
      <div style={{ marginTop: 18, display: 'flex', justifyContent: 'center' }}>
        <button
          type="button"
          onClick={() => { setOpen(v => !v); haptic('light'); }}
          className="ghost-link"
          style={{ textDecoration: 'none' as any }}
          aria-expanded={open}
        >
          üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫
        </button>
      </div>

      {/* –ê–∫–∫–æ—Ä–¥–µ–æ–Ω: –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ + –∫–Ω–æ–ø–∫–∏ */}
      {open && (
        <div
          style={{
            marginTop: 12,
            border: '1px dashed #4a4e6a',
            background: '#141823',
            borderRadius: 14,
            padding: 14,
            maxWidth: 560,
            marginLeft: 'auto',
            marginRight: 'auto'
          }}
        >
          <div style={{ marginBottom: 10, opacity: .8, fontSize: 12, letterSpacing: .2 }}>
            –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
          </div>

          {/* –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≥—Ä–∏–¥: –∫—Ä–∞—Å–∏–≤–æ –≤ 2-3 –∫–æ–ª–æ–Ω–∫–∏, –±–µ–∑ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–π */}
          <div
            style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))',
              gap: 8
            }}
          >
            {LOCALES.map((l) => {
              const active = pendingLocale === l.code;
              return (
                <button
                  key={l.code}
                  onClick={() => setPendingLocale(l.code)}
                  className="list-btn"
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: 10,
                    borderRadius: 12,
                    padding: '10px 12px',
                    background: active ? '#1e2434' : '#171a21',
                    border: active ? '1px solid #6573ff' : '1px solid var(--border)',
                    boxShadow: active ? '0 0 0 3px rgba(101,115,255,.15) inset' : 'none',
                    whiteSpace: 'nowrap',
                    overflow: 'hidden',
                    textOverflow: 'ellipsis'
                  }}
                >
                  <span style={{ width: 22, textAlign: 'center', flex: '0 0 22px' }}>{l.flag}</span>
                  <span style={{ fontWeight: 600, minWidth: 0, overflow: 'hidden', textOverflow: 'ellipsis' }}>{l.label}</span>
                </button>
              );
            })}
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div style={{ display: 'flex', gap: 10, justifyContent: 'flex-end', marginTop: 12 }}>
            <button
              type="button"
              onClick={onCancel}
              className="list-btn"
              style={{ padding: '10px 14px', borderRadius: 12, background: '#1a1f2b', border: '1px solid var(--border)' }}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="button"
              onClick={onSave}
              disabled={saving || pendingLocale === currentLocale}
              className="list-btn"
              style={{
                padding: '10px 14px',
                borderRadius: 12,
                background: saving ? '#2a3150' : '#2e3560',
                border: '1px solid #4b57b3',
                opacity: saving ? .7 : 1
              }}
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </button>
          </div>
        </div>
      )}
    </main>
  );
}
