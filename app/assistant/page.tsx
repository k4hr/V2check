'use client';

import { useEffect, useMemo, useRef, useState } from 'react';
import Link from 'next/link';

type Msg = { role: 'user' | 'assistant'; content: string };

export default function AssistantPage() {
  const [messages, setMessages] = useState<Msg[]>([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const boxRef = useRef<HTMLDivElement>(null);

  // –≤—ã—Ç–∞—â–∏–º id –∏–∑ url (–∫–∞–∫ –≤—ã –¥–µ–ª–∞–ª–∏ –Ω–∞ /api/me?id=...)
  const tgId = useMemo(() => {
    if (typeof window === 'undefined') return '';
    const u = new URL(window.location.href);
    return u.searchParams.get('id') || '';
  }, []);

  useEffect(() => {
    const w: any = window;
    w?.Telegram?.WebApp?.ready?.();
    w?.Telegram?.WebApp?.expand?.();
  }, []);

  useEffect(() => {
    boxRef.current?.scrollTo({ top: 1e9, behavior: 'smooth' });
  }, [messages]);

  async function send() {
    const prompt = input.trim();
    if (!prompt || loading) return;
    setInput('');
    setMessages((m) => [...m, { role: 'user', content: prompt }]);
    setLoading(true);

    try {
      const res = await fetch(`/api/assistant/ask${tgId ? `?id=${encodeURIComponent(tgId)}` : ''}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          prompt,
          history: messages.slice(-6), // –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ä–µ–ø–ª–∏–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        }),
      });
      const data = await res.json();
      if (!res.ok || !data.ok) {
        const err = data?.error || `HTTP_${res.status}`;
        if (err === 'FREE_LIMIT_REACHED') {
          setMessages((m) => [
            ...m,
            { role: 'assistant', content: `–õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ Pro –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞.` },
          ]);
        } else {
          setMessages((m) => [...m, { role: 'assistant', content: `–û—à–∏–±–∫–∞: ${err}` }]);
        }
      } else {
        setMessages((m) => [...m, { role: 'assistant', content: data.answer }]);
      }
    } catch (e: any) {
      setMessages((m) => [...m, { role: 'assistant', content: `–°–±–æ–π —Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.` }]);
    } finally {
      setLoading(false);
    }
  }

  return (
    <main style={{ padding: 20, maxWidth: 800, margin: '0 auto' }}>
      <h1 style={{ textAlign: 'center' }}>–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (AI)</h1>

      <div style={{
        marginTop: 16,
        padding: 0,
        borderRadius: 12,
        border: '1px solid var(--border)',
        background: 'var(--panel)',
        display: 'flex',
        flexDirection: 'column',
        height: '70vh'
      }}>
        <div ref={boxRef} style={{ padding: 16, overflowY: 'auto', flex: 1 }}>
          {messages.length === 0 ? (
            <div style={{ opacity: .8 }}>
              –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑–±–æ—Ä –∏ –ø–æ—à–∞–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.
              <ul style={{ marginTop: 8 }}>
                <li>‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {process.env.NEXT_PUBLIC_FREE_QA_PER_DAY || 2} –æ—Ç–≤–µ—Ç(–∞) –≤ –¥–µ–Ω—å</li>
                <li>‚Ä¢ Pro: –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è</li>
              </ul>
            </div>
          ) : (
            messages.map((m, i) => (
              <div key={i} style={{ marginBottom: 12 }}>
                <div style={{ opacity: .6, fontSize: 12, marginBottom: 4 }}>
                  {m.role === 'user' ? '–í—ã' : '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'}
                </div>
                <div style={{ whiteSpace: 'pre-wrap', lineHeight: 1.5 }}>
                  {m.content}
                </div>
              </div>
            ))
          )}
          {loading && <div style={{ opacity: .6 }}>–î—É–º–∞—é‚Ä¶</div>}
        </div>

        <div style={{ padding: 12, borderTop: '1px solid var(--border)' }}>
          <div style={{ display: 'flex', gap: 8 }}>
            <input
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => (e.key === 'Enter' ? send() : null)}
              placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é‚Ä¶"
              style={{
                flex: 1, padding: '10px 12px', borderRadius: 10, border: '1px solid var(--border)', background: 'transparent',
                color: 'inherit', outline: 'none'
              }}
            />
            <button onClick={send} disabled={loading || !input.trim()} className="list-btn" style={{ padding: '0 16px' }}>
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            </button>
          </div>
          <div style={{ marginTop: 10, display: 'grid', gap: 8 }}>
            <Link href="/pro" className="list-btn" style={{ textDecoration: 'none' }}>
              <span className="list-btn__left"><span className="list-btn__emoji">‚≠ê</span><b>–û—Ñ–æ—Ä–º–∏—Ç—å Pro</b></span>
              <span className="list-btn__right"><span className="list-btn__chev">‚Ä∫</span></span>
            </Link>
          </div>
        </div>
      </div>

      <div style={{ display: 'grid', gap: 10, marginTop: 16 }}>
        <Link href="/" className="list-btn" style={{ textDecoration: 'none' }}>
          <span className="list-btn__left"><span className="list-btn__emoji">üè†</span><b>–ù–∞ –≥–ª–∞–≤–Ω—É—é</b></span>
          <span className="list-btn__right"><span className="list-btn__chev">‚Ä∫</span></span>
        </Link>
      </div>
    </main>
  );
}
